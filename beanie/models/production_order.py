# coding: utf-8

"""
    Beanie ERP API

    An API specification for interacting with the Beanie ERP system  # noqa: E501

    OpenAPI spec version: 0.8
    Contact: dev@bean.ie
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from beanie.models.production_order_input import ProductionOrderInput  # noqa: F401,E501
from beanie.models.production_order_log import ProductionOrderLog  # noqa: F401,E501


class ProductionOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'priority': 'int',
        'quantity': 'int',
        'notes': 'str',
        'bill_of_materials_id': 'int',
        'sales_order_id': 'int',
        'id': 'int',
        'work_centre_group_id': 'int',
        'job_order': 'int',
        'state': 'str',
        'logs': 'list[ProductionOrderLog]'
    }

    attribute_map = {
        'priority': 'priority',
        'quantity': 'quantity',
        'notes': 'notes',
        'bill_of_materials_id': 'bill_of_materials_id',
        'sales_order_id': 'sales_order_id',
        'id': 'id',
        'work_centre_group_id': 'work_centre_group_id',
        'job_order': 'job_order',
        'state': 'state',
        'logs': 'logs'
    }

    def __init__(self, priority=None, quantity=None, notes=None, bill_of_materials_id=None, sales_order_id=None, id=None, work_centre_group_id=None, job_order=None, state=None, logs=None):  # noqa: E501
        """ProductionOrder - a model defined in Swagger"""  # noqa: E501

        self._priority = None
        self._quantity = None
        self._notes = None
        self._bill_of_materials_id = None
        self._sales_order_id = None
        self._id = None
        self._work_centre_group_id = None
        self._job_order = None
        self._state = None
        self._logs = None
        self.discriminator = None

        self.priority = priority
        self.quantity = quantity
        if notes is not None:
            self.notes = notes
        if bill_of_materials_id is not None:
            self.bill_of_materials_id = bill_of_materials_id
        if sales_order_id is not None:
            self.sales_order_id = sales_order_id
        if id is not None:
            self.id = id
        if work_centre_group_id is not None:
            self.work_centre_group_id = work_centre_group_id
        if job_order is not None:
            self.job_order = job_order
        if state is not None:
            self.state = state
        if logs is not None:
            self.logs = logs

    @property
    def priority(self):
        """Gets the priority of this ProductionOrder.  # noqa: E501


        :return: The priority of this ProductionOrder.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ProductionOrder.


        :param priority: The priority of this ProductionOrder.  # noqa: E501
        :type: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def quantity(self):
        """Gets the quantity of this ProductionOrder.  # noqa: E501


        :return: The quantity of this ProductionOrder.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductionOrder.


        :param quantity: The quantity of this ProductionOrder.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def notes(self):
        """Gets the notes of this ProductionOrder.  # noqa: E501


        :return: The notes of this ProductionOrder.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ProductionOrder.


        :param notes: The notes of this ProductionOrder.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def bill_of_materials_id(self):
        """Gets the bill_of_materials_id of this ProductionOrder.  # noqa: E501


        :return: The bill_of_materials_id of this ProductionOrder.  # noqa: E501
        :rtype: int
        """
        return self._bill_of_materials_id

    @bill_of_materials_id.setter
    def bill_of_materials_id(self, bill_of_materials_id):
        """Sets the bill_of_materials_id of this ProductionOrder.


        :param bill_of_materials_id: The bill_of_materials_id of this ProductionOrder.  # noqa: E501
        :type: int
        """

        self._bill_of_materials_id = bill_of_materials_id

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this ProductionOrder.  # noqa: E501


        :return: The sales_order_id of this ProductionOrder.  # noqa: E501
        :rtype: int
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this ProductionOrder.


        :param sales_order_id: The sales_order_id of this ProductionOrder.  # noqa: E501
        :type: int
        """

        self._sales_order_id = sales_order_id

    @property
    def id(self):
        """Gets the id of this ProductionOrder.  # noqa: E501


        :return: The id of this ProductionOrder.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductionOrder.


        :param id: The id of this ProductionOrder.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def work_centre_group_id(self):
        """Gets the work_centre_group_id of this ProductionOrder.  # noqa: E501


        :return: The work_centre_group_id of this ProductionOrder.  # noqa: E501
        :rtype: int
        """
        return self._work_centre_group_id

    @work_centre_group_id.setter
    def work_centre_group_id(self, work_centre_group_id):
        """Sets the work_centre_group_id of this ProductionOrder.


        :param work_centre_group_id: The work_centre_group_id of this ProductionOrder.  # noqa: E501
        :type: int
        """

        self._work_centre_group_id = work_centre_group_id

    @property
    def job_order(self):
        """Gets the job_order of this ProductionOrder.  # noqa: E501


        :return: The job_order of this ProductionOrder.  # noqa: E501
        :rtype: int
        """
        return self._job_order

    @job_order.setter
    def job_order(self, job_order):
        """Sets the job_order of this ProductionOrder.


        :param job_order: The job_order of this ProductionOrder.  # noqa: E501
        :type: int
        """

        self._job_order = job_order

    @property
    def state(self):
        """Gets the state of this ProductionOrder.  # noqa: E501


        :return: The state of this ProductionOrder.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProductionOrder.


        :param state: The state of this ProductionOrder.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def logs(self):
        """Gets the logs of this ProductionOrder.  # noqa: E501


        :return: The logs of this ProductionOrder.  # noqa: E501
        :rtype: list[ProductionOrderLog]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this ProductionOrder.


        :param logs: The logs of this ProductionOrder.  # noqa: E501
        :type: list[ProductionOrderLog]
        """

        self._logs = logs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductionOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
