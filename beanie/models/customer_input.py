# coding: utf-8

"""
    Beanie ERP API

    An API specification for interacting with the Beanie ERP system  # noqa: E501

    OpenAPI spec version: 0.2
    Contact: dev@bean.ie
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'currency_code': 'str',
        'net_terms': 'int',
        'credit_limit': 'float',
        'customer_vat': 'str'
    }

    attribute_map = {
        'name': 'name',
        'currency_code': 'currency_code',
        'net_terms': 'net_terms',
        'credit_limit': 'credit_limit',
        'customer_vat': 'customer_vat'
    }

    def __init__(self, name=None, currency_code=None, net_terms=None, credit_limit=None, customer_vat=None):  # noqa: E501
        """CustomerInput - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._currency_code = None
        self._net_terms = None
        self._credit_limit = None
        self._customer_vat = None
        self.discriminator = None

        self.name = name
        self.currency_code = currency_code
        if net_terms is not None:
            self.net_terms = net_terms
        if credit_limit is not None:
            self.credit_limit = credit_limit
        if customer_vat is not None:
            self.customer_vat = customer_vat

    @property
    def name(self):
        """Gets the name of this CustomerInput.  # noqa: E501


        :return: The name of this CustomerInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomerInput.


        :param name: The name of this CustomerInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def currency_code(self):
        """Gets the currency_code of this CustomerInput.  # noqa: E501


        :return: The currency_code of this CustomerInput.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CustomerInput.


        :param currency_code: The currency_code of this CustomerInput.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def net_terms(self):
        """Gets the net_terms of this CustomerInput.  # noqa: E501


        :return: The net_terms of this CustomerInput.  # noqa: E501
        :rtype: int
        """
        return self._net_terms

    @net_terms.setter
    def net_terms(self, net_terms):
        """Sets the net_terms of this CustomerInput.


        :param net_terms: The net_terms of this CustomerInput.  # noqa: E501
        :type: int
        """

        self._net_terms = net_terms

    @property
    def credit_limit(self):
        """Gets the credit_limit of this CustomerInput.  # noqa: E501


        :return: The credit_limit of this CustomerInput.  # noqa: E501
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this CustomerInput.


        :param credit_limit: The credit_limit of this CustomerInput.  # noqa: E501
        :type: float
        """

        self._credit_limit = credit_limit

    @property
    def customer_vat(self):
        """Gets the customer_vat of this CustomerInput.  # noqa: E501


        :return: The customer_vat of this CustomerInput.  # noqa: E501
        :rtype: str
        """
        return self._customer_vat

    @customer_vat.setter
    def customer_vat(self, customer_vat):
        """Sets the customer_vat of this CustomerInput.


        :param customer_vat: The customer_vat of this CustomerInput.  # noqa: E501
        :type: str
        """

        self._customer_vat = customer_vat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
