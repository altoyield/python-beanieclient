# coding: utf-8

"""
    Beanie ERP API

    An API specification for interacting with the Beanie ERP system  # noqa: E501

    OpenAPI spec version: 0.2
    Contact: dev@bean.ie
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from beanie.models.customer_input import CustomerInput  # noqa: F401,E501
from beanie.models.customer_ledger import CustomerLedger  # noqa: F401,E501
from beanie.models.customer_note import CustomerNote  # noqa: F401,E501


class Customer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'currency_code': 'str',
        'net_terms': 'int',
        'credit_limit': 'float',
        'customer_vat': 'str',
        'id': 'int',
        'code': 'str',
        'state': 'str',
        'credit_hold': 'bool',
        'balance': 'float',
        'address_ids': 'list[int]',
        'notes': 'list[CustomerNote]',
        'ledgers': 'list[CustomerLedger]'
    }

    attribute_map = {
        'name': 'name',
        'currency_code': 'currency_code',
        'net_terms': 'net_terms',
        'credit_limit': 'credit_limit',
        'customer_vat': 'customer_vat',
        'id': 'id',
        'code': 'code',
        'state': 'state',
        'credit_hold': 'credit_hold',
        'balance': 'balance',
        'address_ids': 'address_ids',
        'notes': 'notes',
        'ledgers': 'ledgers'
    }

    def __init__(self, name=None, currency_code=None, net_terms=None, credit_limit=None, customer_vat=None, id=None, code=None, state=None, credit_hold=None, balance=None, address_ids=None, notes=None, ledgers=None):  # noqa: E501
        """Customer - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._currency_code = None
        self._net_terms = None
        self._credit_limit = None
        self._customer_vat = None
        self._id = None
        self._code = None
        self._state = None
        self._credit_hold = None
        self._balance = None
        self._address_ids = None
        self._notes = None
        self._ledgers = None
        self.discriminator = None

        self.name = name
        self.currency_code = currency_code
        if net_terms is not None:
            self.net_terms = net_terms
        if credit_limit is not None:
            self.credit_limit = credit_limit
        if customer_vat is not None:
            self.customer_vat = customer_vat
        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if state is not None:
            self.state = state
        if credit_hold is not None:
            self.credit_hold = credit_hold
        if balance is not None:
            self.balance = balance
        if address_ids is not None:
            self.address_ids = address_ids
        if notes is not None:
            self.notes = notes
        if ledgers is not None:
            self.ledgers = ledgers

    @property
    def name(self):
        """Gets the name of this Customer.  # noqa: E501


        :return: The name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Customer.


        :param name: The name of this Customer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def currency_code(self):
        """Gets the currency_code of this Customer.  # noqa: E501


        :return: The currency_code of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Customer.


        :param currency_code: The currency_code of this Customer.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def net_terms(self):
        """Gets the net_terms of this Customer.  # noqa: E501


        :return: The net_terms of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._net_terms

    @net_terms.setter
    def net_terms(self, net_terms):
        """Sets the net_terms of this Customer.


        :param net_terms: The net_terms of this Customer.  # noqa: E501
        :type: int
        """

        self._net_terms = net_terms

    @property
    def credit_limit(self):
        """Gets the credit_limit of this Customer.  # noqa: E501


        :return: The credit_limit of this Customer.  # noqa: E501
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this Customer.


        :param credit_limit: The credit_limit of this Customer.  # noqa: E501
        :type: float
        """

        self._credit_limit = credit_limit

    @property
    def customer_vat(self):
        """Gets the customer_vat of this Customer.  # noqa: E501


        :return: The customer_vat of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._customer_vat

    @customer_vat.setter
    def customer_vat(self, customer_vat):
        """Sets the customer_vat of this Customer.


        :param customer_vat: The customer_vat of this Customer.  # noqa: E501
        :type: str
        """

        self._customer_vat = customer_vat

    @property
    def id(self):
        """Gets the id of this Customer.  # noqa: E501


        :return: The id of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Customer.


        :param id: The id of this Customer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this Customer.  # noqa: E501


        :return: The code of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Customer.


        :param code: The code of this Customer.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def state(self):
        """Gets the state of this Customer.  # noqa: E501


        :return: The state of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Customer.


        :param state: The state of this Customer.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def credit_hold(self):
        """Gets the credit_hold of this Customer.  # noqa: E501


        :return: The credit_hold of this Customer.  # noqa: E501
        :rtype: bool
        """
        return self._credit_hold

    @credit_hold.setter
    def credit_hold(self, credit_hold):
        """Sets the credit_hold of this Customer.


        :param credit_hold: The credit_hold of this Customer.  # noqa: E501
        :type: bool
        """

        self._credit_hold = credit_hold

    @property
    def balance(self):
        """Gets the balance of this Customer.  # noqa: E501


        :return: The balance of this Customer.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Customer.


        :param balance: The balance of this Customer.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def address_ids(self):
        """Gets the address_ids of this Customer.  # noqa: E501


        :return: The address_ids of this Customer.  # noqa: E501
        :rtype: list[int]
        """
        return self._address_ids

    @address_ids.setter
    def address_ids(self, address_ids):
        """Sets the address_ids of this Customer.


        :param address_ids: The address_ids of this Customer.  # noqa: E501
        :type: list[int]
        """

        self._address_ids = address_ids

    @property
    def notes(self):
        """Gets the notes of this Customer.  # noqa: E501


        :return: The notes of this Customer.  # noqa: E501
        :rtype: list[CustomerNote]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Customer.


        :param notes: The notes of this Customer.  # noqa: E501
        :type: list[CustomerNote]
        """

        self._notes = notes

    @property
    def ledgers(self):
        """Gets the ledgers of this Customer.  # noqa: E501


        :return: The ledgers of this Customer.  # noqa: E501
        :rtype: list[CustomerLedger]
        """
        return self._ledgers

    @ledgers.setter
    def ledgers(self, ledgers):
        """Sets the ledgers of this Customer.


        :param ledgers: The ledgers of this Customer.  # noqa: E501
        :type: list[CustomerLedger]
        """

        self._ledgers = ledgers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Customer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
